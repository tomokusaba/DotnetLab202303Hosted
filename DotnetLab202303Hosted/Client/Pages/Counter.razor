@page "/Counter"
@inject HttpClient http;
@using DotnetLab202303Hosted.Shared;
@using System.Net;
<h1>サンプル2</h1>
<EditForm Model="@parson" OnValidSubmit="@ValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <label>
            名前：
            <InputText @bind-Value="parson.Name" />
        </label>
    </p>
    <p>
        <label>
            誕生日：
            <InputDate @bind-Value="parson.Birthday" />
        </label>
    </p>
    @foreach (var skill in parson.Skills)
    {
        <p>
            <label>
                スキル名：
                <InputText @bind-Value="skill.SkillName" />
            </label>
        </p>
        <p>
            <label>
                レア度：
                <InputNumber @bind-Value="skill.Rare" />
            </label>
        </p>
    }
    <button type="button" @onclick="AddForm">増やす</button>
    <button type="submit">送信</button>
</EditForm>
@ErrorMessage
@if (parsons != null)
{
    <table class="table table-striped table-bordered">
        <thead class="table-primary">
            <tr>
                <td>名前</td>
                <td>誕生日</td>
                <td>スキル</td>
                <td>レア度</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var items in parsons)
            {
                <tr>

                    <td >@items.Name</td>
                    <td >@items.Birthday</td>
                    <td>
                        @foreach (var skill in items.Skills)
                        {
                            @skill.SkillName<br />
                        }
                    </td>
                    <td>
                        @foreach (var skill in items.Skills)
                        {
                            @skill.Rare<br />
                        }
                    </td>

                </tr>
            }
        </tbody>
    </table>
}
@code {
    private Parson parson = new();

    private IEnumerable<Parson>? parsons;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        parson.Skills.Add(new Skill());
        try
        {
            parsons = await http.GetFromJsonAsync<IEnumerable<Parson>>("api/ParsonItems");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private void AddForm()
    {
        parson.Skills.Add(new Skill());
    }

    private async Task ValidSubmit()
    {
        try
        {
            var res = await http.PostAsJsonAsync("api/ParsonItems", parson);
            if (res.StatusCode == HttpStatusCode.BadRequest)
            {
                ErrorMessage = "BadRequest";
            }
        }
        catch (Exception)
        {

        }
        parsons = await http.GetFromJsonAsync<IEnumerable<Parson>>("api/ParsonItems");
    }
}